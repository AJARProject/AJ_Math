{	"count": 238,	"countPass": 238,	"countFail": 0,	"categories": [		{			"category": "Test Math formula",			"count": 194,			"countPass": 194,			"countFail": 0,			"descriptions": [				{					"UUID": "35DA418A49794E728AD4BC6CF50A7056",					"tests": [						{							"pass": true,							"result": "ok - Given 0.7853981633975 radians equal 45 degrees: should return 45",							"expected": 45,							"actual": 45						}					],					"description": "toDegrees",					"count": 1,					"countPass": 1,					"countFail": 0,					"method": "_Math_toDegrees"				},				{					"UUID": "DFECDB0D8D864CDB824473547ED151B8",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return -INF",							"expected": "-INF",							"actual": "-INF"						},						{							"pass": true,							"result": "ok - Given text \"NaN\" as argument: should return -INF",							"expected": "-INF",							"actual": "-INF"						},						{							"pass": true,							"result": "ok - Given expression division (log(8)/log(2)) as argument: should return 3",							"expected": 3,							"actual": 3						},						{							"pass": true,							"result": "ok - Given passing an empty object {} as argument: should return -INF",							"expected": "-INF",							"actual": "-INF"						},						{							"pass": true,							"result": "ok - Given passing a collection with one element [2] as argument: should return 0.6931471805599",							"expected": 0.6931471805599,							"actual": 0.69314718055995						},						{							"pass": true,							"result": "ok - Given passing a collection with one element negative [-2] as argument: should return NaN",							"expected": "",							"actual": ""						},						{							"pass": true,							"result": "ok - Given passing a collection with more than one element [2,3] as argument: should return -INF",							"expected": "-INF",							"actual": "-INF"						},						{							"pass": true,							"result": "ok - Given passsing (1) as argument: should return 0",							"expected": 0,							"actual": 0						}					],					"description": "log",					"count": 8,					"countPass": 8,					"countFail": 0,					"method": "_Math_log"				},				{					"UUID": "05DB924D51C941D78BB517A7E1478F3E",					"tests": [						{							"pass": true,							"result": "ok - Given atan2(15, 90) return 0.1651486774146: should return 0.1651486774146",							"expected": 0.1651486774146,							"actual": 0.16514867741463						},						{							"pass": true,							"result": "ok - Given atan2(0,0) return 0: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given atan2(1,2) return 0.4636476090008: should return 0.4636476090008",							"expected": 0.4636476090008,							"actual": 0.46364760900081						}					],					"description": "atan2",					"count": 3,					"countPass": 3,					"countFail": 0,					"method": "_Math_atan2"				},				{					"UUID": "652A9145B2414347B0D0D7EE1DD444FF",					"tests": [						{							"pass": true,							"result": "ok - Given (3^2)+(4^2): should return 5",							"expected": 5,							"actual": 5						},						{							"pass": true,							"result": "ok - Given (5^2)+(12^2): should return 13",							"expected": 13,							"actual": 13						},						{							"pass": true,							"result": "ok - Given 0: should return 0",							"expected": 0,							"actual": 0						}					],					"description": "sqrt",					"count": 3,					"countPass": 3,					"countFail": 0,					"method": "_Math_sqrt"				},				{					"UUID": "656A4C404DE948B6AD78421F17038BED",					"tests": [						{							"pass": true,							"result": "ok - Given no Radius parameter set local: should return 1.646803375856 km",							"expected": 1.646803375856,							"actual": 1.6468033759549						},						{							"pass": true,							"result": "ok - Given Between BigBen London and statue of Liberty New york: should return 5567.660292921 km",							"expected": 5567.660292921,							"actual": 5567.6602929209						},						{							"pass": true,							"result": "ok - Given between Milan and statue of Liberty New york: should return 5149.995533938 km",							"expected": 5149.995533938,							"actual": 5149.9955339378						},						{							"pass": true,							"result": "ok - Given no Radius parameter set: should return 5637.518685164km",							"expected": 5637.518685164,							"actual": 5637.5186851638						},						{							"pass": true,							"result": "ok - Given distance with radius parameter set to 1000 km: should return 2112.508770729 km",							"expected": 2112.508770729,							"actual": 2112.5087707288						},						{							"pass": true,							"result": "ok - Given distance with no radius parameter -50.81,10.35,40.98,-80.53: should return 13458.79337831 km",							"expected": 13458.79337831,							"actual": 13458.793378313						}					],					"description": "spherodistance",					"count": 6,					"countPass": 6,					"countFail": 0,					"method": "_Math_spherodistance"				},				{					"UUID": "29384F4CF4D24D53A36A3319DE6CB23C",					"tests": [						{							"pass": true,							"result": "ok - Given Math.clz32(1): should return 31",							"expected": 31,							"actual": 31						},						{							"pass": true,							"result": "ok - Given Math.clz32(4): should return 29",							"expected": 29,							"actual": 29						},						{							"pass": true,							"result": "ok - Given Math.clz32(1000): should return 22",							"expected": 22,							"actual": 22						}					],					"description": "clz32",					"count": 3,					"countPass": 3,					"countFail": 0,					"method": "_Math_clz32"				},				{					"UUID": "01DEA45B3A4447C0BBC5CF6E24CD4006",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return NaN",							"expected": "",							"actual": ""						},						{							"pass": true,							"result": "ok - Given expression acosh(0) as argument: should return NaN",							"expected": "",							"actual": ""						},						{							"pass": true,							"result": "ok - Given expression acosh(1) as argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given expression acosh(-1) as argument: should return NaN",							"expected": "",							"actual": ""						},						{							"pass": true,							"result": "ok - Given expression cosh(2) as argument: should return 1.3169578969248166",							"expected": 1.316957896925,							"actual": 1.3169578969248						}					],					"description": "acosh",					"count": 5,					"countPass": 5,					"countFail": 0,					"method": "_Math_acosh"				},				{					"UUID": "5245360CEE404D378918BB8EECE3DA00",					"tests": [						{							"pass": true,							"result": "ok - Given 0: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given 1: should return 0.7615941559557649",							"expected": 0.7615941559558,							"actual": 0.76159415595576						},						{							"pass": true,							"result": "ok - Given -1: should return -0.7615941559557649",							"expected": -0.7615941559558,							"actual": -0.76159415595576						},						{							"pass": true,							"result": "ok - Given -100: should return -1",							"expected": -1,							"actual": -1						},						{							"pass": true,							"result": "ok - Given 12: should return 0.9999999999244973",							"expected": 0.9999999999245,							"actual": 0.9999999999245						},						{							"pass": true,							"result": "ok - Given -0.5: should return -0.46211715726000974",							"expected": -0.46211715726,							"actual": -0.46211715726001						}					],					"description": "tanh",					"count": 6,					"countPass": 6,					"countFail": 0,					"method": "_Math_tanh"				},				{					"UUID": "2B7751191400436E9CA65BA44448CF29",					"tests": [						{							"pass": true,							"result": "ok - Given 0: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given 1: should return 1.1752011936438014",							"expected": 1.175201193644,							"actual": 1.1752011936438						},						{							"pass": true,							"result": "ok - Given -1: should return -1.1752011936438014",							"expected": -1.175201193644,							"actual": -1.1752011936438						},						{							"pass": true,							"result": "ok - Given 2: should return 3.626860407847019",							"expected": 3.626860407847,							"actual": 3.626860407847						}					],					"description": "sinh",					"count": 4,					"countPass": 4,					"countFail": 0,					"method": "_Math_sinh"				},				{					"UUID": "5D9A7C0C3C624B72A01F75E788C380BF",					"tests": [						{							"pass": true,							"result": "ok - Given passing a collection with one element [1]: should return 1",							"expected": 1,							"actual": 1						},						{							"pass": true,							"result": "ok - Given passing a collection [1;3;2]: should return 3",							"expected": 3,							"actual": 3						},						{							"pass": true,							"result": "ok - Given passing a collection [-1;-3;-2]: should return -1",							"expected": -1,							"actual": -1						},						{							"pass": true,							"result": "ok - Given passing a collection [-1;-3;2]: should return 2",							"expected": 2,							"actual": 2						}					],					"description": "max",					"count": 4,					"countPass": 4,					"countFail": 0,					"method": "_Math_max"				},				{					"UUID": "B463D53E36174956BEAFDC2C8A8D6D0B",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return 1",							"expected": 1,							"actual": 1						},						{							"pass": true,							"result": "ok - Given expression addition (1+1) as argument: should return 7.38905609893065",							"expected": 7.389056098931,							"actual": 7.3890560989307						},						{							"pass": true,							"result": "ok - Given negative number -1 as argument: should return 0.36787944117144233",							"expected": 0.3678794411714,							"actual": 0.36787944117144						},						{							"pass": true,							"result": "ok - Given passing an empty object {} as argument: should return 1",							"expected": 1,							"actual": 1						},						{							"pass": true,							"result": "ok - Given passing a collection with one element [1] as argument: should return 2.718281828459045",							"expected": 2.718281828459,							"actual": 2.718281828459						},						{							"pass": true,							"result": "ok - Given passing a collection with more than one element [2,3] as argument: should return 1",							"expected": 1,							"actual": 1						}					],					"description": "exp",					"count": 6,					"countPass": 6,					"countFail": 0,					"method": "_Math_exp"				},				{					"UUID": "F5FBBBB96D304FD9B78DDCCBC162E3E2",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given expression (0 * Math.PI/180) as argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given expression (45 * Math.PI/180) as argument: should return 1",							"expected": 1.0000000000001,							"actual": 1.0000000000001						},						{							"pass": true,							"result": "ok - Given expression (90 * Math.PI/180) as argument: should return -9649380295141",							"expected": -9649380295141.2,							"actual": -9649380295141.2						},						{							"pass": true,							"result": "ok - Given expression (50 * Math.PI/180) as argument: should return 1.191753592594",							"expected": 1.1917535925943,							"actual": 1.1917535925943						},						{							"pass": true,							"result": "ok - Given expression (60 * Math.PI/180) as argument: should return 1.732050807569",							"expected": 1.7320508075692,							"actual": 1.7320508075692						}					],					"description": "tan",					"count": 6,					"countPass": 6,					"countFail": 0,					"method": "_Math_tan"				},				{					"UUID": "51ACC792186347C88A445C5854231252",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given text \"NaN\" as argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given expression addition (3+2.95) as argument: should return 5",							"expected": 5,							"actual": 5						},						{							"pass": true,							"result": "ok - Given negative number -5.05 as argument: should return -6",							"expected": -6,							"actual": -6						},						{							"pass": true,							"result": "ok - Given passing an empty object {} as argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given passing a collection with one element [5.05] as argument: should return 5",							"expected": 5,							"actual": 5						},						{							"pass": true,							"result": "ok - Given passing a collection with one element negative [-5.05] as argument: should return -6",							"expected": -6,							"actual": -6						},						{							"pass": true,							"result": "ok - Given passing a collection with more than one element [2.05,3.5] as argument: should return 0",							"expected": 0,							"actual": 0						}					],					"description": "floor",					"count": 8,					"countPass": 8,					"countFail": 0,					"method": "_Math_floor"				},				{					"UUID": "5E8CE1B67518408C978978F49A7F9CD3",					"tests": [						{							"pass": true,							"result": "ok - Given One negative value as argument hypot(): should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given One negative value as argument hypot(-5): should return 5",							"expected": 5,							"actual": 5						},						{							"pass": true,							"result": "ok - Given A collection of two values hypot([3;4]): should return 5",							"expected": 5,							"actual": 5						},						{							"pass": true,							"result": "ok - Given A collection of three values hypot([3;4;5]): should return 7.0710678118654755",							"expected": 7.071067811865,							"actual": 7.0710678118655						},						{							"pass": true,							"result": "ok - Given A collection of three values hypot([3;4;\"foo\"]): should return 5",							"expected": 5,							"actual": 5						},						{							"pass": true,							"result": "ok - Given A collection of three values hypot([3;4;\"5\"]): should return 7.0710678118654755",							"expected": 7.071067811865,							"actual": 7.0710678118655						}					],					"description": "hypot",					"count": 6,					"countPass": 6,					"countFail": 0,					"method": "_Math_hypot"				},				{					"UUID": "FC92B2AC67CC40039996C46851EE9549",					"tests": [						{							"pass": true,							"result": "ok - Given passing (7;3): should return 343",							"expected": 343,							"actual": 343						},						{							"pass": true,							"result": "ok - Given passing (4;0.5): should return 2",							"expected": 2,							"actual": 2						},						{							"pass": true,							"result": "ok - Given passing (7;-2): should return 0.02040816326530612",							"expected": 0.02040816326531,							"actual": 0.020408163265306						},						{							"pass": true,							"result": "ok - Given passing (-7;0.5): should return NaN",							"expected": "",							"actual": ""						}					],					"description": "pow",					"count": 4,					"countPass": 4,					"countFail": 0,					"method": "_Math_pow"				},				{					"UUID": "FD2EDEDA692A4719B464965D9F2B508B",					"tests": [						{							"pass": true,							"result": "ok - Given  the arccos of 0.866 is 0.5236495809318 in radian: should return 0.5236495809318",							"expected": 0.5236495809318,							"actual": 0.52364958093183						},						{							"pass": true,							"result": "ok - Given  the arccos of -1 is PI: should return 3.14159265359",							"expected": 3.14159265359,							"actual": 3.14159265359						},						{							"pass": true,							"result": "ok - Given  the arccos of 0 is 1.5707963267948966: should return 1.5707963267948966",							"expected": 1.570796326795,							"actual": 1.570796326795						},						{							"pass": true,							"result": "ok - Given  the arccos of 0.5 is 1.0471975511965979: should return 1.0471975511965979",							"expected": 1.047197551197,							"actual": 1.0471975511966						},						{							"pass": true,							"result": "ok - Given  the arccos of 1 is 0: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given  the arccos of 2 is 0: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given  the arccos of -2 is 0: should return 0",							"expected": 0,							"actual": 0						}					],					"description": "acos",					"count": 7,					"countPass": 7,					"countFail": 0,					"method": "_Math_acos"				},				{					"UUID": "6DCE18B9F6F544C5B498BEABDB106827",					"tests": [						{							"pass": true,							"result": "ok - Given  the arcsine of 2 is 0: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given  the arcsine of -2 is 0: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given  the arcsine of -1 is -Pi/2: should return -1.5707963267948966",							"expected": -1.570796326795,							"actual": -1.5707963267949						},						{							"pass": true,							"result": "ok - Given  the arcsine of 0 is 0: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given  the arcsine of 0.5 is 0.5235987755982989: should return 0.5235987755982989",							"expected": 0.5235987755983,							"actual": 0.5235987755983						},						{							"pass": true,							"result": "ok - Given  the arcsine of 1 is Pi/2: should return 1.5707963267948966",							"expected": 1.570796326795,							"actual": 1.570796326795						}					],					"description": "asin",					"count": 6,					"countPass": 6,					"countFail": 0,					"method": "_Math_asin"				},				{					"UUID": "6BCDB267F0434146A2626413F684D8BB",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given expression atan(8/10) as argument: should return 0.6747409422236",							"expected": 0.67474094222355,							"actual": 0.67474094222355						},						{							"pass": true,							"result": "ok - Given expression (atan(1)*4) as argument: should return 3.14159265359",							"expected": 3.14159265359,							"actual": 3.1415926535898						},						{							"pass": true,							"result": "ok - Given expression atan(5/3) as argument: should return 1.030376826524",							"expected": 1.0303768265243,							"actual": 1.0303768265243						}					],					"description": "atan",					"count": 4,					"countPass": 4,					"countFail": 0,					"method": "_Math_atan"				},				{					"UUID": "9505A547203747F993479601C36C73EA",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given text \"NaN\" as argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given expression addition (-12+13) as argument: should return 1",							"expected": 1,							"actual": 1						},						{							"pass": true,							"result": "ok - Given negative number -12 as argument: should return 12",							"expected": 12,							"actual": 12						},						{							"pass": true,							"result": "ok - Given passing an empty object {} as argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given passing a collection with one element [2] as argument: should return 2",							"expected": 2,							"actual": 2						},						{							"pass": true,							"result": "ok - Given passing a collection with one element negative [-2] as argument: should return 2",							"expected": 2,							"actual": 2						},						{							"pass": true,							"result": "ok - Given passing a collection with more than one element [2,3] as argument: should return 0",							"expected": 0,							"actual": 0						}					],					"description": "abs",					"count": 8,					"countPass": 8,					"countFail": 0,					"method": "_Math_abs"				},				{					"UUID": "1AACBA70940D44269A9EB60274C1773E",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return -INF",							"expected": "-INF",							"actual": "-INF"						},						{							"pass": true,							"result": "ok - Given text \"NaN\" as argument: should return -INF",							"expected": "-INF",							"actual": "-INF"						},						{							"pass": true,							"result": "ok - Given passing an empty object {} as argument: should return -INF",							"expected": "-INF",							"actual": "-INF"						},						{							"pass": true,							"result": "ok - Given expression division (3/1) as argument: should return 1.584962500721156",							"expected": 1.584962500721,							"actual": 1.5849625007212						},						{							"pass": true,							"result": "ok - Given passing a collection with one element [2] as argument: should return 1",							"expected": 1,							"actual": 1						},						{							"pass": true,							"result": "ok - Given passing a collection with one element negative [-2] as argument: should return NaN",							"expected": "",							"actual": ""						},						{							"pass": true,							"result": "ok - Given passing a collection with more than one element [2,3] as argument: should return -INF",							"expected": "-INF",							"actual": "-INF"						},						{							"pass": true,							"result": "ok - Given passsing (1) as argument: should return 0",							"expected": 0,							"actual": 0						}					],					"description": "log2",					"count": 8,					"countPass": 8,					"countFail": 0,					"method": "_Math_log2"				},				{					"UUID": "7555EC0A6ACC4FBAB046174647758893",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return 1",							"expected": 1,							"actual": 1						},						{							"pass": true,							"result": "ok - Given expression cos(1)*10 as argument: should return 5.403023058681",							"expected": 5.4030230586814,							"actual": 5.4030230586814						},						{							"pass": true,							"result": "ok - Given expression cos(2)*10 as argument: should return -4.161468365471",							"expected": -4.1614683654714,							"actual": -4.1614683654714						},						{							"pass": true,							"result": "ok - Given expression ((Math.PI)* 10) as argument: should return -10",							"expected": -10,							"actual": -10						}					],					"description": "cos",					"count": 4,					"countPass": 4,					"countFail": 0,					"method": "_Math_cos"				},				{					"UUID": "F3882132959E4B938A27346FBB5A1C59",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given 1+1: should return 1",							"expected": 1,							"actual": 1						},						{							"pass": true,							"result": "ok - Given 10-13: should return -1",							"expected": -1,							"actual": -1						},						{							"pass": true,							"result": "ok - Given 0: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given \"-3\": should return -1",							"expected": -1,							"actual": -1						},						{							"pass": true,							"result": "ok - Given \"foo\": should return 0",							"expected": 0,							"actual": 0						}					],					"description": "sign",					"count": 6,					"countPass": 6,					"countFail": 0,					"method": "_Math_sign"				},				{					"UUID": "84417A4CF5044088939174C2B67D514B",					"tests": [						{							"pass": true,							"result": "ok - Given 45 degrees equal 0.7853981633975 radian: should return 0.7853981633975",							"expected": 0.7853981633975,							"actual": 0.7853981633975						}					],					"description": "toRadians",					"count": 1,					"countPass": 1,					"countFail": 0,					"method": "_Math_toRadians"				},				{					"UUID": "5E026DF92140479AA1F2214631D104A9",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given passing 0.9 as argument: should return 1",							"expected": 1,							"actual": 1						},						{							"pass": true,							"result": "ok - Given passing 5.95 as argument: should return 6",							"expected": 6,							"actual": 6						},						{							"pass": true,							"result": "ok - Given passing 5.5 as argument: should return 6",							"expected": 6,							"actual": 6						},						{							"pass": true,							"result": "ok - Given passing 5.05 as argument: should return 5",							"expected": 5,							"actual": 5						},						{							"pass": true,							"result": "ok - Given passing -5.05 as argument: should return -5",							"expected": -5,							"actual": -5						},						{							"pass": true,							"result": "ok - Given passing -5.5 as argument: should return -5",							"expected": -5,							"actual": -5						},						{							"pass": true,							"result": "ok - Given passing -5.95 as argument: should return -6",							"expected": -6,							"actual": -6						}					],					"description": "round",					"count": 8,					"countPass": 8,					"countFail": 0,					"method": "_Math_round"				},				{					"UUID": "C79F43AAE7AA4A4A9974AB50915B4915",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given expression cos(1)*10 as argument: should return 8.414709848079",							"expected": 8.414709848079,							"actual": 8.414709848079						},						{							"pass": true,							"result": "ok - Given expression sin(2)*10 as argument: should return 9.092974268257",							"expected": 9.0929742682568,							"actual": 9.0929742682568						},						{							"pass": true,							"result": "ok - Given expression ((Math.PI)* 10) as argument: should return -0.000000000002068231071102",							"expected": -2.0682310711021E-12,							"actual": -2.0682310711021E-12						}					],					"description": "sin",					"count": 4,					"countPass": 4,					"countFail": 0,					"method": "_Math_sin"				},				{					"UUID": "21F54B16A51F4082AAA844F12729A615",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given \"-INF\" as argument: should return -INF",							"expected": "-INF",							"actual": "-INF"						},						{							"pass": true,							"result": "ok - Given expression cbrt(2/1) as argument: should return 1.2599210498948732",							"expected": 1.259921049895,							"actual": 1.2599210498949						},						{							"pass": true,							"result": "ok - Given expression (cbrt(1*1)) as argument: should return 1",							"expected": 1,							"actual": 1						},						{							"pass": true,							"result": "ok - Given expression (cbrt(-1) as argument: should return -1",							"expected": -1,							"actual": -1						},						{							"pass": true,							"result": "ok - Given expression cbrt(-0) as argument: should return -0",							"expected": -0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given expression cbrt(0) as argument: should return 0",							"expected": 0,							"actual": 0						}					],					"description": "cbrt",					"count": 7,					"countPass": 7,					"countFail": 0,					"method": "_Math_cbrt"				},				{					"UUID": "956D731F59FC44AF8FDCAA196E40362C",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return -INF",							"expected": "-INF",							"actual": "-INF"						},						{							"pass": true,							"result": "ok - Given text \"NaN\" as argument: should return -INF",							"expected": "-INF",							"actual": "-INF"						},						{							"pass": true,							"result": "ok - Given passing an empty object {} as argument: should return -INF",							"expected": "-INF",							"actual": "-INF"						},						{							"pass": true,							"result": "ok - Given expression division (100000/1) as argument: should return 5",							"expected": 5,							"actual": 5.0000000000006						},						{							"pass": true,							"result": "ok - Given passing a collection with one element [2] as argument: should return 0.3010299956639812",							"expected": 0.301029995664,							"actual": 0.30102999566401						},						{							"pass": true,							"result": "ok - Given passing a collection with one element negative [-2] as argument: should return NaN",							"expected": "",							"actual": ""						},						{							"pass": true,							"result": "ok - Given passing a collection with more than one element [2,3] as argument: should return -INF",							"expected": "-INF",							"actual": "-INF"						},						{							"pass": true,							"result": "ok - Given passsing (1) as argument: should return 0",							"expected": 0,							"actual": 0						}					],					"description": "log10",					"count": 8,					"countPass": 8,					"countFail": 0,					"method": "_Math_log10"				},				{					"UUID": "323D7FC789E145E1940CA780DBD2F7D6",					"tests": [						{							"pass": true,							"result": "ok - Given passing a collection with one element [1]: should return 1",							"expected": 1,							"actual": 1						},						{							"pass": true,							"result": "ok - Given passing a collection [2;3;1]: should return 1",							"expected": 1,							"actual": 1						},						{							"pass": true,							"result": "ok - Given passing a collection [-2;-3;-1]: should return -3",							"expected": -3,							"actual": -3						},						{							"pass": true,							"result": "ok - Given passing a collection [-1;-3;2]: should return -3",							"expected": -3,							"actual": -3						}					],					"description": "min",					"count": 4,					"countPass": 4,					"countFail": 0,					"method": "_Math_min"				},				{					"UUID": "98ED631A874841758B3CC20A7B5BF9FB",					"tests": [						{							"pass": true,							"result": "ok - Given Getting a random number between 0 (inclusive) and 1 (exclusive): should return 0.989165929136",							"expected": 0.98916592913602,							"actual": 0.98916592913602						}					],					"description": "random",					"count": 1,					"countPass": 1,					"countFail": 0,					"method": "_Math_random"				},				{					"UUID": "FF2870B01FB1421CB7342B3D7989493B",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given text \"NaN\" as argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given passing 1 as argument: should return 0.6931471805599453",							"expected": 0.6931471805599,							"actual": 0.69314718055995						},						{							"pass": true,							"result": "ok - Given passing an empty object {} as argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given passing a collection with one element [0] as argument: should return -INF",							"expected": "-INF",							"actual": "-INF"						},						{							"pass": true,							"result": "ok - Given passing a collection with one element negative [-2] as argument: should return NaN",							"expected": "",							"actual": ""						},						{							"pass": true,							"result": "ok - Given passing a collection with more than one element [2,3] as argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given passsing (-1) as argument: should return -INF",							"expected": "-INF",							"actual": "-INF"						}					],					"description": "log1p",					"count": 8,					"countPass": 8,					"countFail": 0,					"method": "_Math_log1p"				},				{					"UUID": "299B8CB8819F425491ACA28628414838",					"tests": [						{							"pass": true,							"result": "ok - Given multiply -MAXLONG with 125: should return -2147483523",							"expected": -2147483523,							"actual": -2147483523						},						{							"pass": true,							"result": "ok - Given multiply 0x7FFFFFFF with 0x7FFFFFFF: should return 1",							"expected": 1,							"actual": 1						}					],					"description": "imul",					"count": 2,					"countPass": 2,					"countFail": 0,					"method": "_Math_imul"				},				{					"UUID": "BD2F908CDCD54473B30E96204F2E1049",					"tests": [						{							"pass": true,							"result": "ok - Given 13.37: should return 13",							"expected": 13,							"actual": 13						},						{							"pass": true,							"result": "ok - Given 42.84: should return 42",							"expected": 42,							"actual": 42						},						{							"pass": true,							"result": "ok - Given -42.84: should return -42",							"expected": -42,							"actual": -42						},						{							"pass": true,							"result": "ok - Given 0.123: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given -0.123: should return -0",							"expected": -0,							"actual": 0						}					],					"description": "trunc",					"count": 5,					"countPass": 5,					"countFail": 0,					"method": "_Math_trunc"				},				{					"UUID": "62B7558302F8491994FB042B7F69F24B",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given expression atanh(1/2) as argument: should return 0.549306144334055",							"expected": 0.5493061443341,							"actual": 0.54930614433405						},						{							"pass": true,							"result": "ok - Given expression (atanh(1*1) as argument: should return INF",							"expected": "INF",							"actual": "INF"						},						{							"pass": true,							"result": "ok - Given expression (atanh(-1) as argument: should return -INF",							"expected": "-INF",							"actual": "-INF"						},						{							"pass": true,							"result": "ok - Given expression atanh(0) as argument: should return 0",							"expected": 0,							"actual": 0						}					],					"description": "atanh",					"count": 5,					"countPass": 5,					"countFail": 0,					"method": "_Math_atanh"				},				{					"UUID": "4F39C45C30A64D8DB07CD7AABF41A35B",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given expression asinh(0) as argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given expression asinh(1) as argument: should return 0.881373587019543",							"expected": 0.8813735870195,							"actual": 0.88137358701954						},						{							"pass": true,							"result": "ok - Given expression asinh(-1) as argument: should return -0.881373587019543",							"expected": -0.8813735870195,							"actual": -0.88137358701954						},						{							"pass": true,							"result": "ok - Given expression cosh(2) as argument: should return 1.4436354751788103",							"expected": 1.443635475179,							"actual": 1.4436354751788						}					],					"description": "asinh",					"count": 5,					"countPass": 5,					"countFail": 0,					"method": "_Math_asinh"				},				{					"UUID": "0FB709A9662D48EE9B9BF3F0DC972EE8",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given expression addition (0+1) as argument: should return 1.718281828459045",							"expected": 1.718281828459,							"actual": 1.718281828459						},						{							"pass": true,							"result": "ok - Given negative number -1 as argument: should return -0.6321205588285577",							"expected": -0.6321205588286,							"actual": -0.63212055882856						},						{							"pass": true,							"result": "ok - Given passing an empty object {} as argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given passing a collection with one element [2] as argument: should return 6.38905609893065",							"expected": 6.389056098931,							"actual": 6.3890560989307						},						{							"pass": true,							"result": "ok - Given passing a collection with more than one element [2,3] as argument: should return 0",							"expected": 0,							"actual": 0						}					],					"description": "expm1",					"count": 6,					"countPass": 6,					"countFail": 0,					"method": "_Math_expm1"				},				{					"UUID": "8530DC074DB042C483E8D153E184722E",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return 1",							"expected": 1,							"actual": 1						},						{							"pass": true,							"result": "ok - Given expression cosh(0) as argument: should return 1",							"expected": 1,							"actual": 1						},						{							"pass": true,							"result": "ok - Given expression cosh(1) as argument: should return 1.543080634815",							"expected": 1.543080634815,							"actual": 1.5430806348152						},						{							"pass": true,							"result": "ok - Given expression cosh(-1) as argument: should return 1.543080634815",							"expected": 1.5430806348152,							"actual": 1.5430806348152						},						{							"pass": true,							"result": "ok - Given expression cosh(2) as argument: should return 3.762195691084",							"expected": 3.7621956910836,							"actual": 3.7621956910836						}					],					"description": "cosh",					"count": 5,					"countPass": 5,					"countFail": 0,					"method": "_Math_cosh"				},				{					"UUID": "B8D7FFD59E8742B898AD36F3292363B1",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given text \"NaN\" as argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given expression addition (1+0.95) as argument: should return 2",							"expected": 2,							"actual": 2						},						{							"pass": true,							"result": "ok - Given passing 4 as argument: should return 4",							"expected": 4,							"actual": 4						},						{							"pass": true,							"result": "ok - Given negative number -7.004 as argument: should return -7",							"expected": -7,							"actual": -7						},						{							"pass": true,							"result": "ok - Given passing an empty object {} as argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given passing a collection with one element [7.004] as argument: should return 8",							"expected": 8,							"actual": 8						},						{							"pass": true,							"result": "ok - Given passing a collection with one element negative [-7.004] as argument: should return -7",							"expected": -7,							"actual": -7						},						{							"pass": true,							"result": "ok - Given passing a collection with more than one element [2.05,3.5] as argument: should return 0",							"expected": 0,							"actual": 0						}					],					"description": "ceil",					"count": 9,					"countPass": 9,					"countFail": 0,					"method": "_Math_ceil"				}			]		},		{			"category": "Test Math properties",			"count": 10,			"countPass": 10,			"countFail": 0,			"descriptions": [				{					"UUID": "5C292C59703B42C3A78174DA630C3530",					"tests": [						{							"pass": true,							"result": "ok - Given Math.SQRT2: should return 1.414213562373",							"expected": 1.414213562373,							"actual": 1.414213562373						}					],					"description": "Math.SQRT2",					"count": 1,					"countPass": 1,					"countFail": 0,					"method": "_Math_Properties_SQRT2"				},				{					"UUID": "5D7C41050CAD4B45B66E01FFD6793791",					"tests": [						{							"pass": true,							"result": "ok - Given Math.E: should return 2.718281828459",							"expected": 2.718281828459,							"actual": 2.718281828459						}					],					"description": "Math.E",					"count": 1,					"countPass": 1,					"countFail": 0,					"method": "_Math_Properties_E"				},				{					"UUID": "F970DD1072E84697BEF9CA5E89560CA5",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return 57.29577951308",							"expected": 57.29577951308,							"actual": 57.29577951308						}					],					"description": "Math.Radian",					"count": 1,					"countPass": 1,					"countFail": 0,					"method": "_Math_Properties_Radian"				},				{					"UUID": "0266B7885AB74EEC819101A05E1B834C",					"tests": [						{							"pass": true,							"result": "ok - Given Math.LOG2E: should return 1.4426950408889634",							"expected": 1.442695040889,							"actual": 1.442695040889						}					],					"description": "Math.LOG2E",					"count": 1,					"countPass": 1,					"countFail": 0,					"method": "_Math_Properties_LOG2E"				},				{					"UUID": "BB1BD16EE3BC4E438E3F6A464B34569C",					"tests": [						{							"pass": true,							"result": "ok - Given Math.LOG10E: should return 0.4342944819033",							"expected": 0.4342944819033,							"actual": 0.4342944819033						}					],					"description": "Math.LOG10E",					"count": 1,					"countPass": 1,					"countFail": 0,					"method": "_Math_Properties_LOG10E"				},				{					"UUID": "485B38FDC1904C0AA7FAE93081120D8C",					"tests": [						{							"pass": true,							"result": "ok - Given Math.PI: should return 3.14159265359",							"expected": 3.14159265359,							"actual": 3.14159265359						}					],					"description": "Math.PI",					"count": 1,					"countPass": 1,					"countFail": 0,					"method": "_Math_Properties_PI"				},				{					"UUID": "B1DA5B18BBE7489F981933CCFBBB76F6",					"tests": [						{							"pass": true,							"result": "ok - Given Math.LN2: should return 0.6931471805599",							"expected": 0.6931471805599,							"actual": 0.6931471805599						}					],					"description": "Math.LN2",					"count": 1,					"countPass": 1,					"countFail": 0,					"method": "_Math_Properties_LN2"				},				{					"UUID": "6BE5AEF2B4D74B8E890385DDB88642C9",					"tests": [						{							"pass": true,							"result": "ok - Given Math.LN10: should return 2.302585092994046",							"expected": 2.302585092994,							"actual": 2.302585092994						}					],					"description": "Math.LN10",					"count": 1,					"countPass": 1,					"countFail": 0,					"method": "_Math_Properties_LN10"				},				{					"UUID": "542CB4C40E87457EAC35C6909FA3C487",					"tests": [						{							"pass": true,							"result": "ok - Given Math.Degree: should return 0.01745329251994",							"expected": 0.01745329251994,							"actual": 0.01745329251994						}					],					"description": "Math.Degree",					"count": 1,					"countPass": 1,					"countFail": 0,					"method": "_Math_Properties_Degree"				},				{					"UUID": "61434450CA9048AF83E786C8078FB075",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return 0.7071067811865",							"expected": 0.7071067811865,							"actual": 0.7071067811865						}					],					"description": "SQRT1_2",					"count": 1,					"countPass": 1,					"countFail": 0,					"method": "_Math_Properties_SQRT1_2"				}			]		},		{			"category": "Math Round Decimal",			"count": 33,			"countPass": 33,			"countFail": 0,			"descriptions": [				{					"UUID": "0525DE5E3D3E4579B07D8AD5B83F9F00",					"tests": [						{							"pass": true,							"result": "ok - Given 1.222, round up with 0.1 precision: should return 1.3",							"expected": 1.3,							"actual": 1.3						},						{							"pass": true,							"result": "ok - Given -1.222, round up with 0.1 precision: should return -1.3",							"expected": -1.3,							"actual": -1.3						},						{							"pass": true,							"result": "ok - Given 1.222, round down with 0.1 precision: should return 1.2",							"expected": 1.2,							"actual": 1.2						},						{							"pass": true,							"result": "ok - Given -1.222, round down with 0.1 precision: should return -1.2",							"expected": -1.2,							"actual": -1.2						},						{							"pass": true,							"result": "ok - Given 1.222, round ceiling with 0.1 precision: should return 1.3",							"expected": 1.3,							"actual": 1.3						},						{							"pass": true,							"result": "ok - Given -1.222, round ceiling with 0.1 precision: should return -1.2",							"expected": -1.2,							"actual": -1.2						},						{							"pass": true,							"result": "ok - Given 1.222, round floor with 0.1 precision: should return 1.2",							"expected": 1.2,							"actual": 1.2						},						{							"pass": true,							"result": "ok - Given -1.222, round floor with 0.1 precision: should return -1.3",							"expected": -1.3,							"actual": -1.3						},						{							"pass": true,							"result": "ok - Given 1.25, round half up with 0.1 precision: should return 1.3",							"expected": 1.3,							"actual": 1.3						},						{							"pass": true,							"result": "ok - Given -1.25, round half up with 0.1 precision: should return -1.3",							"expected": -1.3,							"actual": -1.3						},						{							"pass": true,							"result": "ok - Given 1.222, round half up with 0.1 precision: should return 1.2",							"expected": 1.2,							"actual": 1.2						},						{							"pass": true,							"result": "ok - Given -1.222, round half up with 0.1 precision: should return -1.2",							"expected": -1.2,							"actual": -1.2						},						{							"pass": true,							"result": "ok - Given 1.25, round half down with 0.1 precision: should return 1.2",							"expected": 1.2,							"actual": 1.2						},						{							"pass": true,							"result": "ok - Given -1.25, round half down with 0.1 precision: should return -1.2",							"expected": -1.2,							"actual": -1.2						},						{							"pass": true,							"result": "ok - Given 1.222, round half down with 0.1 precision: should return 1.2",							"expected": 1.2,							"actual": 1.2						},						{							"pass": true,							"result": "ok - Given -1.222, round half down with 0.1 precision: should return -1.2",							"expected": -1.2,							"actual": -1.2						},						{							"pass": true,							"result": "ok - Given 1.25, round half ceiling with 0.1 precision: should return 1.3",							"expected": 1.3,							"actual": 1.3						},						{							"pass": true,							"result": "ok - Given -1.25, round half ceiling with 0.1 precision: should return -1.2",							"expected": -1.2,							"actual": -1.2						},						{							"pass": true,							"result": "ok - Given 1.222, round half ceiling with 0.1 precision: should return 1.2",							"expected": 1.2,							"actual": 1.2						},						{							"pass": true,							"result": "ok - Given -1.222, round half ceiling with 0.1 precision: should return -1.2",							"expected": -1.2,							"actual": -1.2						},						{							"pass": true,							"result": "ok - Given 1.25, round half floor with 0.1 precision: should return 1.2",							"expected": 1.2,							"actual": 1.2						},						{							"pass": true,							"result": "ok - Given -1.25, round half floor with 0.1 precision: should return -1.3",							"expected": -1.3,							"actual": -1.3						},						{							"pass": true,							"result": "ok - Given 1.222, round half floor with 0.1 precision: should return 1.2",							"expected": 1.2,							"actual": 1.2						},						{							"pass": true,							"result": "ok - Given -1.222, round half floor with 0.1 precision: should return -1.2",							"expected": -1.2,							"actual": -1.2						},						{							"pass": true,							"result": "ok - Given 1.25, round half even with 0.1 precision: should return 1.2",							"expected": 1.2,							"actual": 1.2						},						{							"pass": true,							"result": "ok - Given -1.25, round half even with 0.1 precision: should return -1.2",							"expected": -1.2,							"actual": -1.2						},						{							"pass": true,							"result": "ok - Given 1.15, round half even with 0.1 precision: should return 1.2",							"expected": 1.2,							"actual": 1.2						},						{							"pass": true,							"result": "ok - Given -1.15, round half even with 0.1 precision: should return -1.2",							"expected": -1.2,							"actual": -1.2						},						{							"pass": true,							"result": "ok - Given 1.222, round half even with 0.1 precision: should return 1.2",							"expected": 1.2,							"actual": 1.2						},						{							"pass": true,							"result": "ok - Given -1.222, round half even with 0.1 precision: should return -1.2",							"expected": -1.2,							"actual": -1.2						},						{							"pass": true,							"result": "ok - Given 1.231257, round up with 0.125 precision: should return 1.25",							"expected": 1.25,							"actual": 1.25						},						{							"pass": true,							"result": "ok - Given 1.00001, round up with 0.125 precision: should return 1.125",							"expected": 1.125,							"actual": 1.125						},						{							"pass": true,							"result": "ok - Given 1.123456789, round up with 0.00567 precision: should return 1.12833",							"expected": 1.12833,							"actual": 1.12833						}					],					"description": "roundDecimal",					"count": 33,					"countPass": 33,					"countFail": 0,					"method": "_Math_roundDecimal"				}			]		},		{			"category": "Tools",			"count": 1,			"countPass": 1,			"countFail": 0,			"descriptions": [				{					"UUID": "BDE2F63FCC27481D95744F2CA7C3AF25",					"tests": [						{							"pass": true,							"result": "ok - Given 32766: should return 00000000000000000111111111111110",							"expected": "00000000000000000111111111111110",							"actual": "00000000000000000111111111111110"						}					],					"description": "Convert a longint to a binary string",					"count": 1,					"countPass": 1,					"countFail": 0,					"method": "_Tool_Longint2BinaryString"				}			]		}	],	"result": true,	"lastTestDate": "March 8, 2020 - 19:29"}