{	"count": 238,	"countPass": 238,	"countFail": 0,	"categories": [		{			"category": "Test Math formula",			"count": 194,			"countPass": 194,			"countFail": 0,			"descriptions": [				{					"UUID": "8A0755DBF88F4E8F9D47C132C0DF35B5",					"tests": [						{							"pass": true,							"result": "ok - Given 0.7853981633975 radians equal 45 degrees: should return 45",							"expected": 45,							"actual": 45						}					],					"description": "toDegrees",					"count": 1,					"countPass": 1,					"countFail": 0,					"method": "_Math_toDegrees"				},				{					"UUID": "1D480275BE4E4F29BC320E949E0313AF",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return -INF",							"expected": "-INF",							"actual": "-INF"						},						{							"pass": true,							"result": "ok - Given text \"NaN\" as argument: should return -INF",							"expected": "-INF",							"actual": "-INF"						},						{							"pass": true,							"result": "ok - Given expression division (log(8)/log(2)) as argument: should return 3",							"expected": 3,							"actual": 3						},						{							"pass": true,							"result": "ok - Given passing an empty object {} as argument: should return -INF",							"expected": "-INF",							"actual": "-INF"						},						{							"pass": true,							"result": "ok - Given passing a collection with one element [2] as argument: should return 0.6931471805599",							"expected": 0.6931471805599,							"actual": 0.69314718055995						},						{							"pass": true,							"result": "ok - Given passing a collection with one element negative [-2] as argument: should return NaN",							"expected": "",							"actual": ""						},						{							"pass": true,							"result": "ok - Given passing a collection with more than one element [2,3] as argument: should return -INF",							"expected": "-INF",							"actual": "-INF"						},						{							"pass": true,							"result": "ok - Given passsing (1) as argument: should return 0",							"expected": 0,							"actual": 0						}					],					"description": "log",					"count": 8,					"countPass": 8,					"countFail": 0,					"method": "_Math_log"				},				{					"UUID": "E3047F28D07741618C58FC40937F4CFE",					"tests": [						{							"pass": true,							"result": "ok - Given atan2(15, 90) return 0.1651486774146: should return 0.1651486774146",							"expected": 0.1651486774146,							"actual": 0.16514867741463						},						{							"pass": true,							"result": "ok - Given atan2(0,0) return 0: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given atan2(1,2) return 0.4636476090008: should return 0.4636476090008",							"expected": 0.4636476090008,							"actual": 0.46364760900081						}					],					"description": "atan2",					"count": 3,					"countPass": 3,					"countFail": 0,					"method": "_Math_atan2"				},				{					"UUID": "04D877EDECE34D75911FB771C914A8E6",					"tests": [						{							"pass": true,							"result": "ok - Given (3^2)+(4^2): should return 5",							"expected": 5,							"actual": 5						},						{							"pass": true,							"result": "ok - Given (5^2)+(12^2): should return 13",							"expected": 13,							"actual": 13						},						{							"pass": true,							"result": "ok - Given 0: should return 0",							"expected": 0,							"actual": 0						}					],					"description": "sqrt",					"count": 3,					"countPass": 3,					"countFail": 0,					"method": "_Math_sqrt"				},				{					"UUID": "D2418DBF79BE47D2AC0B5931AF402A49",					"tests": [						{							"pass": true,							"result": "ok - Given no Radius parameter set local: should return 1.646803375856 km",							"expected": 1.646803375856,							"actual": 1.6468033759549						},						{							"pass": true,							"result": "ok - Given Between BigBen London and statue of Liberty New york: should return 5567.660292921 km",							"expected": 5567.660292921,							"actual": 5567.6602929209						},						{							"pass": true,							"result": "ok - Given between Milan and statue of Liberty New york: should return 5149.995533938 km",							"expected": 5149.995533938,							"actual": 5149.9955339378						},						{							"pass": true,							"result": "ok - Given no Radius parameter set: should return 5637.518685164km",							"expected": 5637.518685164,							"actual": 5637.5186851638						},						{							"pass": true,							"result": "ok - Given distance with radius parameter set to 1000 km: should return 2112.508770729 km",							"expected": 2112.508770729,							"actual": 2112.5087707288						},						{							"pass": true,							"result": "ok - Given distance with no radius parameter -50.81,10.35,40.98,-80.53: should return 13458.79337831 km",							"expected": 13458.79337831,							"actual": 13458.793378313						}					],					"description": "spherodistance",					"count": 6,					"countPass": 6,					"countFail": 0,					"method": "_Math_spherodistance"				},				{					"UUID": "D243E27228A047A6BD119939ECB4F03A",					"tests": [						{							"pass": true,							"result": "ok - Given Math.clz32(1): should return 31",							"expected": 31,							"actual": 31						},						{							"pass": true,							"result": "ok - Given Math.clz32(4): should return 29",							"expected": 29,							"actual": 29						},						{							"pass": true,							"result": "ok - Given Math.clz32(1000): should return 22",							"expected": 22,							"actual": 22						}					],					"description": "clz32",					"count": 3,					"countPass": 3,					"countFail": 0,					"method": "_Math_clz32"				},				{					"UUID": "76C060DC8B7A450A8B2D85A90B41BED0",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return NaN",							"expected": "",							"actual": ""						},						{							"pass": true,							"result": "ok - Given expression acosh(0) as argument: should return NaN",							"expected": "",							"actual": ""						},						{							"pass": true,							"result": "ok - Given expression acosh(1) as argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given expression acosh(-1) as argument: should return NaN",							"expected": "",							"actual": ""						},						{							"pass": true,							"result": "ok - Given expression cosh(2) as argument: should return 1.3169578969248166",							"expected": 1.316957896925,							"actual": 1.3169578969248						}					],					"description": "acosh",					"count": 5,					"countPass": 5,					"countFail": 0,					"method": "_Math_acosh"				},				{					"UUID": "33D4117B0A8A4099AE8D454D844E313E",					"tests": [						{							"pass": true,							"result": "ok - Given 0: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given 1: should return 0.7615941559557649",							"expected": 0.7615941559558,							"actual": 0.76159415595576						},						{							"pass": true,							"result": "ok - Given -1: should return -0.7615941559557649",							"expected": -0.7615941559558,							"actual": -0.76159415595576						},						{							"pass": true,							"result": "ok - Given -100: should return -1",							"expected": -1,							"actual": -1						},						{							"pass": true,							"result": "ok - Given 12: should return 0.9999999999244973",							"expected": 0.9999999999245,							"actual": 0.9999999999245						},						{							"pass": true,							"result": "ok - Given -0.5: should return -0.46211715726000974",							"expected": -0.46211715726,							"actual": -0.46211715726001						}					],					"description": "tanh",					"count": 6,					"countPass": 6,					"countFail": 0,					"method": "_Math_tanh"				},				{					"UUID": "91F49B5B948B40BF9722D6F7363FFB57",					"tests": [						{							"pass": true,							"result": "ok - Given 0: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given 1: should return 1.1752011936438014",							"expected": 1.175201193644,							"actual": 1.1752011936438						},						{							"pass": true,							"result": "ok - Given -1: should return -1.1752011936438014",							"expected": -1.175201193644,							"actual": -1.1752011936438						},						{							"pass": true,							"result": "ok - Given 2: should return 3.626860407847019",							"expected": 3.626860407847,							"actual": 3.626860407847						}					],					"description": "sinh",					"count": 4,					"countPass": 4,					"countFail": 0,					"method": "_Math_sinh"				},				{					"UUID": "117210637577456CA17A952AEF29A91F",					"tests": [						{							"pass": true,							"result": "ok - Given passing a collection with one element [1]: should return 1",							"expected": 1,							"actual": 1						},						{							"pass": true,							"result": "ok - Given passing a collection [1;3;2]: should return 3",							"expected": 3,							"actual": 3						},						{							"pass": true,							"result": "ok - Given passing a collection [-1;-3;-2]: should return -1",							"expected": -1,							"actual": -1						},						{							"pass": true,							"result": "ok - Given passing a collection [-1;-3;2]: should return 2",							"expected": 2,							"actual": 2						}					],					"description": "max",					"count": 4,					"countPass": 4,					"countFail": 0,					"method": "_Math_max"				},				{					"UUID": "DFC685245BB34DC5BA84A4D5E4D5B628",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return 1",							"expected": 1,							"actual": 1						},						{							"pass": true,							"result": "ok - Given expression addition (1+1) as argument: should return 7.38905609893065",							"expected": 7.389056098931,							"actual": 7.3890560989307						},						{							"pass": true,							"result": "ok - Given negative number -1 as argument: should return 0.36787944117144233",							"expected": 0.3678794411714,							"actual": 0.36787944117144						},						{							"pass": true,							"result": "ok - Given passing an empty object {} as argument: should return 1",							"expected": 1,							"actual": 1						},						{							"pass": true,							"result": "ok - Given passing a collection with one element [1] as argument: should return 2.718281828459045",							"expected": 2.718281828459,							"actual": 2.718281828459						},						{							"pass": true,							"result": "ok - Given passing a collection with more than one element [2,3] as argument: should return 1",							"expected": 1,							"actual": 1						}					],					"description": "exp",					"count": 6,					"countPass": 6,					"countFail": 0,					"method": "_Math_exp"				},				{					"UUID": "F6856F017A6D4ECFB657AC3B97C370F0",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given expression (0 * Math.PI/180) as argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given expression (45 * Math.PI/180) as argument: should return 1",							"expected": 1.0000000000001,							"actual": 1.0000000000001						},						{							"pass": true,							"result": "ok - Given expression (90 * Math.PI/180) as argument: should return -9649380295141",							"expected": -9649380295141.2,							"actual": -9649380295141.2						},						{							"pass": true,							"result": "ok - Given expression (50 * Math.PI/180) as argument: should return 1.191753592594",							"expected": 1.1917535925943,							"actual": 1.1917535925943						},						{							"pass": true,							"result": "ok - Given expression (60 * Math.PI/180) as argument: should return 1.732050807569",							"expected": 1.7320508075692,							"actual": 1.7320508075692						}					],					"description": "tan",					"count": 6,					"countPass": 6,					"countFail": 0,					"method": "_Math_tan"				},				{					"UUID": "76DDC312C08C41B299E4440A30993B30",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given text \"NaN\" as argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given expression addition (3+2.95) as argument: should return 5",							"expected": 5,							"actual": 5						},						{							"pass": true,							"result": "ok - Given negative number -5.05 as argument: should return -6",							"expected": -6,							"actual": -6						},						{							"pass": true,							"result": "ok - Given passing an empty object {} as argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given passing a collection with one element [5.05] as argument: should return 5",							"expected": 5,							"actual": 5						},						{							"pass": true,							"result": "ok - Given passing a collection with one element negative [-5.05] as argument: should return -6",							"expected": -6,							"actual": -6						},						{							"pass": true,							"result": "ok - Given passing a collection with more than one element [2.05,3.5] as argument: should return 0",							"expected": 0,							"actual": 0						}					],					"description": "floor",					"count": 8,					"countPass": 8,					"countFail": 0,					"method": "_Math_floor"				},				{					"UUID": "C8A8F06C06394E5C9412BE306ABD8E1C",					"tests": [						{							"pass": true,							"result": "ok - Given One negative value as argument hypot(): should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given One negative value as argument hypot(-5): should return 5",							"expected": 5,							"actual": 5						},						{							"pass": true,							"result": "ok - Given A collection of two values hypot([3;4]): should return 5",							"expected": 5,							"actual": 5						},						{							"pass": true,							"result": "ok - Given A collection of three values hypot([3;4;5]): should return 7.0710678118654755",							"expected": 7.071067811865,							"actual": 7.0710678118655						},						{							"pass": true,							"result": "ok - Given A collection of three values hypot([3;4;\"foo\"]): should return 5",							"expected": 5,							"actual": 5						},						{							"pass": true,							"result": "ok - Given A collection of three values hypot([3;4;\"5\"]): should return 7.0710678118654755",							"expected": 7.071067811865,							"actual": 7.0710678118655						}					],					"description": "hypot",					"count": 6,					"countPass": 6,					"countFail": 0,					"method": "_Math_hypot"				},				{					"UUID": "0308A8D652EB4D34A2CF5FD38AD589A4",					"tests": [						{							"pass": true,							"result": "ok - Given passing (7;3): should return 343",							"expected": 343,							"actual": 343						},						{							"pass": true,							"result": "ok - Given passing (4;0.5): should return 2",							"expected": 2,							"actual": 2						},						{							"pass": true,							"result": "ok - Given passing (7;-2): should return 0.02040816326530612",							"expected": 0.02040816326531,							"actual": 0.020408163265306						},						{							"pass": true,							"result": "ok - Given passing (-7;0.5): should return NaN",							"expected": "",							"actual": ""						}					],					"description": "pow",					"count": 4,					"countPass": 4,					"countFail": 0,					"method": "_Math_pow"				},				{					"UUID": "5C6DC7C29CD948E583848049D8A818C9",					"tests": [						{							"pass": true,							"result": "ok - Given  the arccos of 0.866 is 0.5236495809318 in radian: should return 0.5236495809318",							"expected": 0.5236495809318,							"actual": 0.52364958093183						},						{							"pass": true,							"result": "ok - Given  the arccos of -1 is PI: should return 3.14159265359",							"expected": 3.14159265359,							"actual": 3.14159265359						},						{							"pass": true,							"result": "ok - Given  the arccos of 0 is 1.5707963267948966: should return 1.5707963267948966",							"expected": 1.570796326795,							"actual": 1.570796326795						},						{							"pass": true,							"result": "ok - Given  the arccos of 0.5 is 1.0471975511965979: should return 1.0471975511965979",							"expected": 1.047197551197,							"actual": 1.0471975511966						},						{							"pass": true,							"result": "ok - Given  the arccos of 1 is 0: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given  the arccos of 2 is 0: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given  the arccos of -2 is 0: should return 0",							"expected": 0,							"actual": 0						}					],					"description": "acos",					"count": 7,					"countPass": 7,					"countFail": 0,					"method": "_Math_acos"				},				{					"UUID": "8C69D4580B1C4EBCA745E2E52FA9BFB4",					"tests": [						{							"pass": true,							"result": "ok - Given  the arcsine of 2 is 0: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given  the arcsine of -2 is 0: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given  the arcsine of -1 is -Pi/2: should return -1.5707963267948966",							"expected": -1.570796326795,							"actual": -1.5707963267949						},						{							"pass": true,							"result": "ok - Given  the arcsine of 0 is 0: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given  the arcsine of 0.5 is 0.5235987755982989: should return 0.5235987755982989",							"expected": 0.5235987755983,							"actual": 0.5235987755983						},						{							"pass": true,							"result": "ok - Given  the arcsine of 1 is Pi/2: should return 1.5707963267948966",							"expected": 1.570796326795,							"actual": 1.570796326795						}					],					"description": "asin",					"count": 6,					"countPass": 6,					"countFail": 0,					"method": "_Math_asin"				},				{					"UUID": "D97E1B59FDCA45828C4F7C0AEB92AD98",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given expression atan(8/10) as argument: should return 0.6747409422236",							"expected": 0.67474094222355,							"actual": 0.67474094222355						},						{							"pass": true,							"result": "ok - Given expression (atan(1)*4) as argument: should return 3.14159265359",							"expected": 3.14159265359,							"actual": 3.1415926535898						},						{							"pass": true,							"result": "ok - Given expression atan(5/3) as argument: should return 1.030376826524",							"expected": 1.0303768265243,							"actual": 1.0303768265243						}					],					"description": "atan",					"count": 4,					"countPass": 4,					"countFail": 0,					"method": "_Math_atan"				},				{					"UUID": "DE134FA198F8414C964580FE6A20E8D6",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given text \"NaN\" as argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given expression addition (-12+13) as argument: should return 1",							"expected": 1,							"actual": 1						},						{							"pass": true,							"result": "ok - Given negative number -12 as argument: should return 12",							"expected": 12,							"actual": 12						},						{							"pass": true,							"result": "ok - Given passing an empty object {} as argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given passing a collection with one element [2] as argument: should return 2",							"expected": 2,							"actual": 2						},						{							"pass": true,							"result": "ok - Given passing a collection with one element negative [-2] as argument: should return 2",							"expected": 2,							"actual": 2						},						{							"pass": true,							"result": "ok - Given passing a collection with more than one element [2,3] as argument: should return 0",							"expected": 0,							"actual": 0						}					],					"description": "abs",					"count": 8,					"countPass": 8,					"countFail": 0,					"method": "_Math_abs"				},				{					"UUID": "817140C141E64BCA9A501BF69BF99273",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return -INF",							"expected": "-INF",							"actual": "-INF"						},						{							"pass": true,							"result": "ok - Given text \"NaN\" as argument: should return -INF",							"expected": "-INF",							"actual": "-INF"						},						{							"pass": true,							"result": "ok - Given passing an empty object {} as argument: should return -INF",							"expected": "-INF",							"actual": "-INF"						},						{							"pass": true,							"result": "ok - Given expression division (3/1) as argument: should return 1.584962500721156",							"expected": 1.584962500721,							"actual": 1.5849625007212						},						{							"pass": true,							"result": "ok - Given passing a collection with one element [2] as argument: should return 1",							"expected": 1,							"actual": 1						},						{							"pass": true,							"result": "ok - Given passing a collection with one element negative [-2] as argument: should return NaN",							"expected": "",							"actual": ""						},						{							"pass": true,							"result": "ok - Given passing a collection with more than one element [2,3] as argument: should return -INF",							"expected": "-INF",							"actual": "-INF"						},						{							"pass": true,							"result": "ok - Given passsing (1) as argument: should return 0",							"expected": 0,							"actual": 0						}					],					"description": "log2",					"count": 8,					"countPass": 8,					"countFail": 0,					"method": "_Math_log2"				},				{					"UUID": "A26D8DF84EBD495DB2BA7E03F7AD8CD6",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return 1",							"expected": 1,							"actual": 1						},						{							"pass": true,							"result": "ok - Given expression cos(1)*10 as argument: should return 5.403023058681",							"expected": 5.4030230586814,							"actual": 5.4030230586814						},						{							"pass": true,							"result": "ok - Given expression cos(2)*10 as argument: should return -4.161468365471",							"expected": -4.1614683654714,							"actual": -4.1614683654714						},						{							"pass": true,							"result": "ok - Given expression ((Math.PI)* 10) as argument: should return -10",							"expected": -10,							"actual": -10						}					],					"description": "cos",					"count": 4,					"countPass": 4,					"countFail": 0,					"method": "_Math_cos"				},				{					"UUID": "29ADE39B324349B8BE3C2D3AA4E52233",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given 1+1: should return 1",							"expected": 1,							"actual": 1						},						{							"pass": true,							"result": "ok - Given 10-13: should return -1",							"expected": -1,							"actual": -1						},						{							"pass": true,							"result": "ok - Given 0: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given \"-3\": should return -1",							"expected": -1,							"actual": -1						},						{							"pass": true,							"result": "ok - Given \"foo\": should return 0",							"expected": 0,							"actual": 0						}					],					"description": "sign",					"count": 6,					"countPass": 6,					"countFail": 0,					"method": "_Math_sign"				},				{					"UUID": "AA9B7FEFB9A74D3DA5966E7A00246FDB",					"tests": [						{							"pass": true,							"result": "ok - Given 45 degrees equal 0.7853981633975 radian: should return 0.7853981633975",							"expected": 0.7853981633975,							"actual": 0.7853981633975						}					],					"description": "toRadians",					"count": 1,					"countPass": 1,					"countFail": 0,					"method": "_Math_toRadians"				},				{					"UUID": "299C824BE4324CF688534ED67A6B760D",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given passing 0.9 as argument: should return 1",							"expected": 1,							"actual": 1						},						{							"pass": true,							"result": "ok - Given passing 5.95 as argument: should return 6",							"expected": 6,							"actual": 6						},						{							"pass": true,							"result": "ok - Given passing 5.5 as argument: should return 6",							"expected": 6,							"actual": 6						},						{							"pass": true,							"result": "ok - Given passing 5.05 as argument: should return 5",							"expected": 5,							"actual": 5						},						{							"pass": true,							"result": "ok - Given passing -5.05 as argument: should return -5",							"expected": -5,							"actual": -5						},						{							"pass": true,							"result": "ok - Given passing -5.5 as argument: should return -5",							"expected": -5,							"actual": -5						},						{							"pass": true,							"result": "ok - Given passing -5.95 as argument: should return -6",							"expected": -6,							"actual": -6						}					],					"description": "round",					"count": 8,					"countPass": 8,					"countFail": 0,					"method": "_Math_round"				},				{					"UUID": "271377AC3CF24E9288417F41ED71D486",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given expression cos(1)*10 as argument: should return 8.414709848079",							"expected": 8.414709848079,							"actual": 8.414709848079						},						{							"pass": true,							"result": "ok - Given expression sin(2)*10 as argument: should return 9.092974268257",							"expected": 9.0929742682568,							"actual": 9.0929742682568						},						{							"pass": true,							"result": "ok - Given expression ((Math.PI)* 10) as argument: should return -0.000000000002068231071102",							"expected": -2.0682310711021E-12,							"actual": -2.0682310711021E-12						}					],					"description": "sin",					"count": 4,					"countPass": 4,					"countFail": 0,					"method": "_Math_sin"				},				{					"UUID": "7B03F5EA52114133AF217C27852FD30B",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given \"-INF\" as argument: should return -INF",							"expected": "-INF",							"actual": "-INF"						},						{							"pass": true,							"result": "ok - Given expression cbrt(2/1) as argument: should return 1.2599210498948732",							"expected": 1.259921049895,							"actual": 1.2599210498949						},						{							"pass": true,							"result": "ok - Given expression (cbrt(1*1)) as argument: should return 1",							"expected": 1,							"actual": 1						},						{							"pass": true,							"result": "ok - Given expression (cbrt(-1) as argument: should return -1",							"expected": -1,							"actual": -1						},						{							"pass": true,							"result": "ok - Given expression cbrt(-0) as argument: should return -0",							"expected": -0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given expression cbrt(0) as argument: should return 0",							"expected": 0,							"actual": 0						}					],					"description": "cbrt",					"count": 7,					"countPass": 7,					"countFail": 0,					"method": "_Math_cbrt"				},				{					"UUID": "50C82B8931264AC5839D3FFF22C291CA",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return -INF",							"expected": "-INF",							"actual": "-INF"						},						{							"pass": true,							"result": "ok - Given text \"NaN\" as argument: should return -INF",							"expected": "-INF",							"actual": "-INF"						},						{							"pass": true,							"result": "ok - Given passing an empty object {} as argument: should return -INF",							"expected": "-INF",							"actual": "-INF"						},						{							"pass": true,							"result": "ok - Given expression division (100000/1) as argument: should return 5",							"expected": 5,							"actual": 5.0000000000006						},						{							"pass": true,							"result": "ok - Given passing a collection with one element [2] as argument: should return 0.3010299956639812",							"expected": 0.301029995664,							"actual": 0.30102999566401						},						{							"pass": true,							"result": "ok - Given passing a collection with one element negative [-2] as argument: should return NaN",							"expected": "",							"actual": ""						},						{							"pass": true,							"result": "ok - Given passing a collection with more than one element [2,3] as argument: should return -INF",							"expected": "-INF",							"actual": "-INF"						},						{							"pass": true,							"result": "ok - Given passsing (1) as argument: should return 0",							"expected": 0,							"actual": 0						}					],					"description": "log10",					"count": 8,					"countPass": 8,					"countFail": 0,					"method": "_Math_log10"				},				{					"UUID": "2CDFA0D4E3354BA49C2A2365E5948425",					"tests": [						{							"pass": true,							"result": "ok - Given passing a collection with one element [1]: should return 1",							"expected": 1,							"actual": 1						},						{							"pass": true,							"result": "ok - Given passing a collection [2;3;1]: should return 1",							"expected": 1,							"actual": 1						},						{							"pass": true,							"result": "ok - Given passing a collection [-2;-3;-1]: should return -3",							"expected": -3,							"actual": -3						},						{							"pass": true,							"result": "ok - Given passing a collection [-1;-3;2]: should return -3",							"expected": -3,							"actual": -3						}					],					"description": "min",					"count": 4,					"countPass": 4,					"countFail": 0,					"method": "_Math_min"				},				{					"UUID": "0114EBE61A314A36A316CAC2A7D9FD51",					"tests": [						{							"pass": true,							"result": "ok - Given Getting a random number between 0 (inclusive) and 1 (exclusive): should return 0.8851283303323",							"expected": 0.88512833033235,							"actual": 0.88512833033235						}					],					"description": "random",					"count": 1,					"countPass": 1,					"countFail": 0,					"method": "_Math_random"				},				{					"UUID": "80A1C6632BD84DC3959DB36731DED48E",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given text \"NaN\" as argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given passing 1 as argument: should return 0.6931471805599453",							"expected": 0.6931471805599,							"actual": 0.69314718055995						},						{							"pass": true,							"result": "ok - Given passing an empty object {} as argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given passing a collection with one element [0] as argument: should return -INF",							"expected": "-INF",							"actual": "-INF"						},						{							"pass": true,							"result": "ok - Given passing a collection with one element negative [-2] as argument: should return NaN",							"expected": "",							"actual": ""						},						{							"pass": true,							"result": "ok - Given passing a collection with more than one element [2,3] as argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given passsing (-1) as argument: should return -INF",							"expected": "-INF",							"actual": "-INF"						}					],					"description": "log1p",					"count": 8,					"countPass": 8,					"countFail": 0,					"method": "_Math_log1p"				},				{					"UUID": "9E6DEE6122274D628C454CD4806BA8AB",					"tests": [						{							"pass": true,							"result": "ok - Given multiply -MAXLONG with 125: should return -2147483523",							"expected": -2147483523,							"actual": -2147483523						},						{							"pass": true,							"result": "ok - Given multiply 0x7FFFFFFF with 0x7FFFFFFF: should return 1",							"expected": 1,							"actual": 1						}					],					"description": "imul",					"count": 2,					"countPass": 2,					"countFail": 0,					"method": "_Math_imul"				},				{					"UUID": "8418D84D9C814A32A4EC0807E58C69B0",					"tests": [						{							"pass": true,							"result": "ok - Given 13.37: should return 13",							"expected": 13,							"actual": 13						},						{							"pass": true,							"result": "ok - Given 42.84: should return 42",							"expected": 42,							"actual": 42						},						{							"pass": true,							"result": "ok - Given -42.84: should return -42",							"expected": -42,							"actual": -42						},						{							"pass": true,							"result": "ok - Given 0.123: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given -0.123: should return -0",							"expected": -0,							"actual": 0						}					],					"description": "trunc",					"count": 5,					"countPass": 5,					"countFail": 0,					"method": "_Math_trunc"				},				{					"UUID": "479FE0B20EFE48BC85EA6A2FEA5207D6",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given expression atanh(1/2) as argument: should return 0.549306144334055",							"expected": 0.5493061443341,							"actual": 0.54930614433405						},						{							"pass": true,							"result": "ok - Given expression (atanh(1*1) as argument: should return INF",							"expected": "INF",							"actual": "INF"						},						{							"pass": true,							"result": "ok - Given expression (atanh(-1) as argument: should return -INF",							"expected": "-INF",							"actual": "-INF"						},						{							"pass": true,							"result": "ok - Given expression atanh(0) as argument: should return 0",							"expected": 0,							"actual": 0						}					],					"description": "atanh",					"count": 5,					"countPass": 5,					"countFail": 0,					"method": "_Math_atanh"				},				{					"UUID": "C7D81A2AF4D8480787F9E6D246AF525F",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given expression asinh(0) as argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given expression asinh(1) as argument: should return 0.881373587019543",							"expected": 0.8813735870195,							"actual": 0.88137358701954						},						{							"pass": true,							"result": "ok - Given expression asinh(-1) as argument: should return -0.881373587019543",							"expected": -0.8813735870195,							"actual": -0.88137358701954						},						{							"pass": true,							"result": "ok - Given expression cosh(2) as argument: should return 1.4436354751788103",							"expected": 1.443635475179,							"actual": 1.4436354751788						}					],					"description": "asinh",					"count": 5,					"countPass": 5,					"countFail": 0,					"method": "_Math_asinh"				},				{					"UUID": "6D6243DA4C154D32BB5BA052D3FEC8B5",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given expression addition (0+1) as argument: should return 1.718281828459045",							"expected": 1.718281828459,							"actual": 1.718281828459						},						{							"pass": true,							"result": "ok - Given negative number -1 as argument: should return -0.6321205588285577",							"expected": -0.6321205588286,							"actual": -0.63212055882856						},						{							"pass": true,							"result": "ok - Given passing an empty object {} as argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given passing a collection with one element [2] as argument: should return 6.38905609893065",							"expected": 6.389056098931,							"actual": 6.3890560989307						},						{							"pass": true,							"result": "ok - Given passing a collection with more than one element [2,3] as argument: should return 0",							"expected": 0,							"actual": 0						}					],					"description": "expm1",					"count": 6,					"countPass": 6,					"countFail": 0,					"method": "_Math_expm1"				},				{					"UUID": "62F4E8847C5046A2A2DA5D0FACDA9A82",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return 1",							"expected": 1,							"actual": 1						},						{							"pass": true,							"result": "ok - Given expression cosh(0) as argument: should return 1",							"expected": 1,							"actual": 1						},						{							"pass": true,							"result": "ok - Given expression cosh(1) as argument: should return 1.543080634815",							"expected": 1.543080634815,							"actual": 1.5430806348152						},						{							"pass": true,							"result": "ok - Given expression cosh(-1) as argument: should return 1.543080634815",							"expected": 1.5430806348152,							"actual": 1.5430806348152						},						{							"pass": true,							"result": "ok - Given expression cosh(2) as argument: should return 3.762195691084",							"expected": 3.7621956910836,							"actual": 3.7621956910836						}					],					"description": "cosh",					"count": 5,					"countPass": 5,					"countFail": 0,					"method": "_Math_cosh"				},				{					"UUID": "849C8EEFDDF94369AE3391DDD4E654E5",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given text \"NaN\" as argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given expression addition (1+0.95) as argument: should return 2",							"expected": 2,							"actual": 2						},						{							"pass": true,							"result": "ok - Given passing 4 as argument: should return 4",							"expected": 4,							"actual": 4						},						{							"pass": true,							"result": "ok - Given negative number -7.004 as argument: should return -7",							"expected": -7,							"actual": -7						},						{							"pass": true,							"result": "ok - Given passing an empty object {} as argument: should return 0",							"expected": 0,							"actual": 0						},						{							"pass": true,							"result": "ok - Given passing a collection with one element [7.004] as argument: should return 8",							"expected": 8,							"actual": 8						},						{							"pass": true,							"result": "ok - Given passing a collection with one element negative [-7.004] as argument: should return -7",							"expected": -7,							"actual": -7						},						{							"pass": true,							"result": "ok - Given passing a collection with more than one element [2.05,3.5] as argument: should return 0",							"expected": 0,							"actual": 0						}					],					"description": "ceil",					"count": 9,					"countPass": 9,					"countFail": 0,					"method": "_Math_ceil"				}			]		},		{			"category": "Test Math properties",			"count": 10,			"countPass": 10,			"countFail": 0,			"descriptions": [				{					"UUID": "AA5B5DB436D04BD2983FA52A1C2D652B",					"tests": [						{							"pass": true,							"result": "ok - Given Math.SQRT2: should return 1.414213562373",							"expected": 1.414213562373,							"actual": 1.414213562373						}					],					"description": "Math.SQRT2",					"count": 1,					"countPass": 1,					"countFail": 0,					"method": "_Math_Properties_SQRT2"				},				{					"UUID": "335C04DFAAC046E7BE43F9D2FF9849B1",					"tests": [						{							"pass": true,							"result": "ok - Given Math.E: should return 2.718281828459",							"expected": 2.718281828459,							"actual": 2.718281828459						}					],					"description": "Math.E",					"count": 1,					"countPass": 1,					"countFail": 0,					"method": "_Math_Properties_E"				},				{					"UUID": "C931D2D3D30E4147B6093BD699A46477",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return 57.29577951308",							"expected": 57.29577951308,							"actual": 57.29577951308						}					],					"description": "Math.Radian",					"count": 1,					"countPass": 1,					"countFail": 0,					"method": "_Math_Properties_Radian"				},				{					"UUID": "24A8FEB7F0524516AF822440B74F329C",					"tests": [						{							"pass": true,							"result": "ok - Given Math.LOG2E: should return 1.4426950408889634",							"expected": 1.442695040889,							"actual": 1.442695040889						}					],					"description": "Math.LOG2E",					"count": 1,					"countPass": 1,					"countFail": 0,					"method": "_Math_Properties_LOG2E"				},				{					"UUID": "BC02A1FF763B4CC7B56D71C047BFAE4C",					"tests": [						{							"pass": true,							"result": "ok - Given Math.LOG10E: should return 0.4342944819033",							"expected": 0.4342944819033,							"actual": 0.4342944819033						}					],					"description": "Math.LOG10E",					"count": 1,					"countPass": 1,					"countFail": 0,					"method": "_Math_Properties_LOG10E"				},				{					"UUID": "7B52597F9AE5402DA1D706FFE10AE44B",					"tests": [						{							"pass": true,							"result": "ok - Given Math.PI: should return 3.14159265359",							"expected": 3.14159265359,							"actual": 3.14159265359						}					],					"description": "Math.PI",					"count": 1,					"countPass": 1,					"countFail": 0,					"method": "_Math_Properties_PI"				},				{					"UUID": "00033FF25C6A493195496822485F3D31",					"tests": [						{							"pass": true,							"result": "ok - Given Math.LN2: should return 0.6931471805599",							"expected": 0.6931471805599,							"actual": 0.6931471805599						}					],					"description": "Math.LN2",					"count": 1,					"countPass": 1,					"countFail": 0,					"method": "_Math_Properties_LN2"				},				{					"UUID": "D52E1485860046F99AC90F8D3C59D9BC",					"tests": [						{							"pass": true,							"result": "ok - Given Math.LN10: should return 2.302585092994046",							"expected": 2.302585092994,							"actual": 2.302585092994						}					],					"description": "Math.LN10",					"count": 1,					"countPass": 1,					"countFail": 0,					"method": "_Math_Properties_LN10"				},				{					"UUID": "8AB3B2F395A746FC843C0601C10799F3",					"tests": [						{							"pass": true,							"result": "ok - Given Math.Degree: should return 0.01745329251994",							"expected": 0.01745329251994,							"actual": 0.01745329251994						}					],					"description": "Math.Degree",					"count": 1,					"countPass": 1,					"countFail": 0,					"method": "_Math_Properties_Degree"				},				{					"UUID": "43EF82D4111F47E78DCCBF5E59DB07F6",					"tests": [						{							"pass": true,							"result": "ok - Given no argument: should return 0.7071067811865",							"expected": 0.7071067811865,							"actual": 0.7071067811865						}					],					"description": "SQRT1_2",					"count": 1,					"countPass": 1,					"countFail": 0,					"method": "_Math_Properties_SQRT1_2"				}			]		},		{			"category": "Math Round Decimal",			"count": 33,			"countPass": 33,			"countFail": 0,			"descriptions": [				{					"UUID": "4FE390F424184ACDA05DBA1B0E42462D",					"tests": [						{							"pass": true,							"result": "ok - Given 1.222, round up with 0.1 precision: should return 1.3",							"expected": 1.3,							"actual": 1.3						},						{							"pass": true,							"result": "ok - Given -1.222, round up with 0.1 precision: should return -1.3",							"expected": -1.3,							"actual": -1.3						},						{							"pass": true,							"result": "ok - Given 1.222, round down with 0.1 precision: should return 1.2",							"expected": 1.2,							"actual": 1.2						},						{							"pass": true,							"result": "ok - Given -1.222, round down with 0.1 precision: should return -1.2",							"expected": -1.2,							"actual": -1.2						},						{							"pass": true,							"result": "ok - Given 1.222, round ceiling with 0.1 precision: should return 1.3",							"expected": 1.3,							"actual": 1.3						},						{							"pass": true,							"result": "ok - Given -1.222, round ceiling with 0.1 precision: should return -1.2",							"expected": -1.2,							"actual": -1.2						},						{							"pass": true,							"result": "ok - Given 1.222, round floor with 0.1 precision: should return 1.2",							"expected": 1.2,							"actual": 1.2						},						{							"pass": true,							"result": "ok - Given -1.222, round floor with 0.1 precision: should return -1.3",							"expected": -1.3,							"actual": -1.3						},						{							"pass": true,							"result": "ok - Given 1.25, round half up with 0.1 precision: should return 1.3",							"expected": 1.3,							"actual": 1.3						},						{							"pass": true,							"result": "ok - Given -1.25, round half up with 0.1 precision: should return -1.3",							"expected": -1.3,							"actual": -1.3						},						{							"pass": true,							"result": "ok - Given 1.222, round half up with 0.1 precision: should return 1.2",							"expected": 1.2,							"actual": 1.2						},						{							"pass": true,							"result": "ok - Given -1.222, round half up with 0.1 precision: should return -1.2",							"expected": -1.2,							"actual": -1.2						},						{							"pass": true,							"result": "ok - Given 1.25, round half down with 0.1 precision: should return 1.2",							"expected": 1.2,							"actual": 1.2						},						{							"pass": true,							"result": "ok - Given -1.25, round half down with 0.1 precision: should return -1.2",							"expected": -1.2,							"actual": -1.2						},						{							"pass": true,							"result": "ok - Given 1.222, round half down with 0.1 precision: should return 1.2",							"expected": 1.2,							"actual": 1.2						},						{							"pass": true,							"result": "ok - Given -1.222, round half down with 0.1 precision: should return -1.2",							"expected": -1.2,							"actual": -1.2						},						{							"pass": true,							"result": "ok - Given 1.25, round half ceiling with 0.1 precision: should return 1.3",							"expected": 1.3,							"actual": 1.3						},						{							"pass": true,							"result": "ok - Given -1.25, round half ceiling with 0.1 precision: should return -1.2",							"expected": -1.2,							"actual": -1.2						},						{							"pass": true,							"result": "ok - Given 1.222, round half ceiling with 0.1 precision: should return 1.2",							"expected": 1.2,							"actual": 1.2						},						{							"pass": true,							"result": "ok - Given -1.222, round half ceiling with 0.1 precision: should return -1.2",							"expected": -1.2,							"actual": -1.2						},						{							"pass": true,							"result": "ok - Given 1.25, round half floor with 0.1 precision: should return 1.2",							"expected": 1.2,							"actual": 1.2						},						{							"pass": true,							"result": "ok - Given -1.25, round half floor with 0.1 precision: should return -1.3",							"expected": -1.3,							"actual": -1.3						},						{							"pass": true,							"result": "ok - Given 1.222, round half floor with 0.1 precision: should return 1.2",							"expected": 1.2,							"actual": 1.2						},						{							"pass": true,							"result": "ok - Given -1.222, round half floor with 0.1 precision: should return -1.2",							"expected": -1.2,							"actual": -1.2						},						{							"pass": true,							"result": "ok - Given 1.25, round half even with 0.1 precision: should return 1.2",							"expected": 1.2,							"actual": 1.2						},						{							"pass": true,							"result": "ok - Given -1.25, round half even with 0.1 precision: should return -1.2",							"expected": -1.2,							"actual": -1.2						},						{							"pass": true,							"result": "ok - Given 1.15, round half even with 0.1 precision: should return 1.2",							"expected": 1.2,							"actual": 1.2						},						{							"pass": true,							"result": "ok - Given -1.15, round half even with 0.1 precision: should return -1.2",							"expected": -1.2,							"actual": -1.2						},						{							"pass": true,							"result": "ok - Given 1.222, round half even with 0.1 precision: should return 1.2",							"expected": 1.2,							"actual": 1.2						},						{							"pass": true,							"result": "ok - Given -1.222, round half even with 0.1 precision: should return -1.2",							"expected": -1.2,							"actual": -1.2						},						{							"pass": true,							"result": "ok - Given 1.231257, round up with 0.125 precision: should return 1.25",							"expected": 1.25,							"actual": 1.25						},						{							"pass": true,							"result": "ok - Given 1.00001, round up with 0.125 precision: should return 1.125",							"expected": 1.125,							"actual": 1.125						},						{							"pass": true,							"result": "ok - Given 1.123456789, round up with 0.00567 precision: should return 1.12833",							"expected": 1.12833,							"actual": 1.12833						}					],					"description": "roundDecimal",					"count": 33,					"countPass": 33,					"countFail": 0,					"method": "_Math_roundDecimal"				}			]		},		{			"category": "Tools",			"count": 1,			"countPass": 1,			"countFail": 0,			"descriptions": [				{					"UUID": "04C35AA95F7B4458A799426577163AB7",					"tests": [						{							"pass": true,							"result": "ok - Given 32766: should return 00000000000000000111111111111110",							"expected": "00000000000000000111111111111110",							"actual": "00000000000000000111111111111110"						}					],					"description": "Convert a longint to a binary string",					"count": 1,					"countPass": 1,					"countFail": 0,					"method": "_Tool_Longint2BinaryString"				}			]		}	],	"result": true,	"lastTestDate": "July 26, 2021 - 15:19"}